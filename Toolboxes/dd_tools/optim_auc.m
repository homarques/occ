%OPTIM_AUC Optimize hyperparameters for an OCC
%
%    W = OPTIM_AUC(X,WNAME,FRACREJ,RANGE,NRFOLDS,VARARGIN)
%    W = X*OPTIM_AUC([],WNAME,FRACREJ,RANGE,NRFOLDS,VARARGIN)
%    W = X*OPTIM_AUC(WNAME,FRACREJ,RANGE,NRFOLDS,VARARGIN)
%
% INPUT
%   X         One-class dataset
%   WNAME     Classifier name (string) (default = 'knndd')
%   FRACREJ   Error on the target class (default = 0.1)
%   RANGE     Possible parameter values (default = 1:5)
%   NRFOLDS   Number of folds in crossvalidation (default = 5)
%   VARARGIN  Additional parameters needed for the classifier
%
% OUTPUT
%   W         Trained one-class classifier
%
% DESCRIPTION
% Optimize the AUC-performance of classifier WNAME (string) on dataset
% X. This optimization is over the complexity parameter (this should be
% the third input parameter for the one-class classifier). RANGE should
% contain a vector of parameter values that are tried. For each
% parameter value, NRFOLDS-fold crossvalidation is applied and the
% parameter for which the highest AUC is obtained, is used to train the
% final classifier W.
%
% When dataset X does not contain example outlier objects, they
% are generated by gendatout.m.
%
% Example:
% >> a = target_class(gendatb,1);
% >> w = optim_auc(a,'mog_dd',0.1,1:5);
% >> scatterd(a); plotc(w);
%
% SEE ALSO
% scale_range, dd_crossval, gendatout

% Copyright: D.M.J. Tax, D.M.J.Tax@prtools.org
% Faculty EWI, Delft University of Technology
% P.O. Box 5031, 2600 GA Delft, The Netherlands

%function [w,optval] = optim_auc(x,wname,fracrej,range,nrbags,varargin)
function [w,optval] = optim_auc(varargin)

argin = shiftargin(varargin,'char');
argin = setdefaults(argin,[],'knndd',0.1,1:5,5);

if mapping_task(argin,'definition')
   w = define_mapping(argin,'untrained','AUC optim. %s',argin{2});

elseif mapping_task(argin,'training')

   [x,wname,fracrej,range,nrbags] = deal(argin{1:5});
   if length(argin)>5
      otherargin = argin(6:end);
   else
      otherargin = [];
   end

   % Check some things (there are too many input parameters, and it is very
   % easy to forget one, or mix them up):
   if ~isa(wname,'char')
      error('Expecting the name (string!) of the classifier.');
   end
   if length(fracrej)>1
      error('Fracrej should be a scalar.');
   end
   nrrange = length(range);
   if nrrange<2
      error('Expecting a range of param. values.');
   end
   if ~isa(nrbags,'double') || length(nrbags)>1
      error('Parameter NRBAGS should be a scalar.');
   end

   % First check if the dataset contains any outlier data, if not then we
   % have to generate them!
   [xt,xo]=target_class(x);
   if size(xo,1)==0
      dd_message(7,'Generating artificial outliers in "optim_auc"');
      xo = gendatout(x,size(x,1));
   end

   % run over all the parameter values:
   meanauc = zeros(nrrange,1);
   for k=1:nrrange

      fprintf('.');
      % Apply the crossvalidation:
      res = zeros(nrbags,1);

      I = nrbags;
      for i=1:nrbags
         % Generate train and test set
         [xtr,xte,I] = dd_crossval(x,I);
         if ~isempty(xo),
            % DXD: sometimes datasets are not completely well-formed, make sure
            % that the identifiers are cellarrays:
            if isa(getident(xte),'double')
               xte = setident(xte,num2cell(getident(xte)));
            end
            if isa(getident(xo),'double')
               xo = setident(xo,num2cell(getident(xo)));
            end
            xte = [xte; xo];
         else
            error('I require outlier examples for the evaluation of the AUC');
         end
         % Train a classifier:
         if ~isempty(otherargin)
            w = feval(wname,xtr,fracrej,range(k),otherargin{:});
         else
            w = feval(wname,xtr,fracrej,range(k));
         end
         % Compute the AUC on the leave-out bags
         res(i) = dd_auc(xte*w*dd_roc);
      end
      
      % store the mean auc:
      meanauc(k) = mean(res);
   end

   % now find which value is the best:
   [maxval,kopt] = max(meanauc);

   % So, the final classifier becomes:
   if ~isempty(otherargin)
      w = feval(wname,x,fracrej,range(kopt),otherargin{:});
   else
      w = feval(wname,x,fracrej,range(kopt));
   end
   w = setname(w,'AUC optim. classifier');
   optval = range(kopt);

else
   error('Illegal call to optim_auc.');
end
return


